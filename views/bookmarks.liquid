{% assign pageTitle = "Bookmarks | Oncollaboration" %}
{% include "partials/head.liquid" %}

    <div class="breadcrumbs-links">
        <a href="/">Home</a>
        <a href="/bookmarks">/ Bookmarks</a>
    </div>

    <main id="main">
        <div class="page-title">
            <h1>Bookmarks</h1>
            <p>Your bookmarked webinars are saved here for easy access. Revisit expert insights and the latest practices in radiotherapy at your convenience. Stay up to date with advancements in the field, all in one place.</p>
        </div>

        {% if webinars.size == 0 %}
            {% include "partials/bookmarks-empty.liquid" %}
        {% else %}
            <div class="sort-filter">
                {% include "partials/sort-filter.liquid" %}
            </div>

            <section class="all-webinars">
                <h2>Overview bookmarks</h2>
                <div class="webinars-overview">
                    {% for webinar in webinars %}
                        {% include "partials/webinar-card.liquid" %}
                    {% endfor %}
                </div>
            </section>
        {% endif %}
    </main>
    <script>
        if ('fetch' in window && 'DOMParser' in window) {
    
    // Als er ergens op de pagina een formulier wordt gesubmit..
    // (We maken hier gebruik van Event Delegation)
    document.addEventListener('submit', async function(event) {
    
      // Hou in een variabele bij welk formulier dat was
      const form = event.target
    
      // Als dit formulier geen data-enhanced attribuut heeft, doe dan niks
      // Dit doen we, zodat we sommige formulieren op de pagina kunnen 'enhancen'
      // Data attributen mag je zelf verzinnen; dit is dus niet iets speciaals
      // https://developer.mozilla.org/en-US/docs/Learn_web_development/Howto/Solve_HTML_problems/Use_data_attributes
      if (!form.hasAttribute('data-enhanced')) {
        return
      }
    
      // Voorkom de standaard submit van de browser
      // Let op: hiermee overschrijven we de default Loading state van de browser...
      event.preventDefault()
    
      form.classList.add("loading")

      // lijst met alle webinars
      const webinarList = document.querySelectorAll(".webinar-article");

      // als het aangeklikte form de laatste is op de pagina, ga naar de normale POST (en dus niet client-side)
      if (webinarList.length === 1) {
        form.submit() // trigger POST submit (server-side) en pagina reload ---> empty state ingeladen
        return // verlaat script
      }
    
      // Doe een fetch naar de server, net als hoe de browser dit normaal zou doen
      // Gebruik daarvoor het action en method attribuut van het originele formulier
      // Inclusief alle formulierelementen
      const response = await fetch(form.action, {
        method: form.method,
        body: new URLSearchParams(new FormData(form))
      })
    
      // De server redirect op de normale manier, en geeft HTML terug
      // (De server weet niet eens dat deze fetch via client-side JavaScript gebeurde)
      const responseText = await response.text()
    
      // Normaal zou de browser die HTML parsen en weergeven, maar daar moeten we nu zelf iets mee
      // Parse de nieuwe HTML en maak hiervan een nieuw Document Object Model in het geheugen
      const parser = new DOMParser()
      const responseDOM = parser.parseFromString(responseText, 'text/html')

      form.closest(".webinar-article")?.remove() 
    
      // Zoek in die nieuwe DOM onze nieuwe state op, die we via Liquid hebben klaargemaakt
      // We gebruiken hiervoor het data-enhanced attribuut, zodat we weten waar we naar moeten zoeken
      // (Hierdoor kunnen we ook meerdere formulieren op dezelfde pagina gebruiken)
      const newState = responseDOM.querySelector('[data-enhanced="' + form.getAttribute('data-enhanced') + '"]')
    
      // Overschrijf ook het profile ding in de header, met een PLOP animatie
      
      // Overschrijf ons formulier met de nieuwe HTML
      // Hier wil je waarschijnlijk de Loading state vervangen door een Success state
      form.outerHTML = newState.outerHTML
    
    })
    }
    </script>

{% render "partials/foot.liquid" %}